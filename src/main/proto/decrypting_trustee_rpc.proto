syntax = "proto3";

import "common.proto";
import "common_rpc.proto";

option java_package = "electionguard.protogen2";
option java_outer_classname = "DecryptingTrusteeProto";

service DecryptingTrusteeService {
  rpc directDecrypt (DirectDecryptionRequest) returns (DirectDecryptionResponse) {}
  rpc compensatedDecrypt (CompensatedDecryptionRequest) returns (CompensatedDecryptionResponse) {}
  rpc finish (FinishRequest) returns (ErrorResponse) {}
}

message DirectDecryptionRequest {
  ElementModQ extended_base_hash = 1; // The election extended_base_hash.
  repeated ElGamalCiphertext text = 2; // The text(s) to decrypt.
}

message DirectDecryptionResponse {
  string error = 1; // non empty on error
  repeated DirectDecryptionResult results = 2; // one for each text, in order
}

message DirectDecryptionResult {
  ElementModP decryption = 1;
  GenericChaumPedersenProof proof = 2;
}

message CompensatedDecryptionRequest {
  ElementModQ extended_base_hash = 1; // The election extended_base_hash.
  string missing_guardian_id = 2; // The id of the guardian that's missing.
  repeated ElGamalCiphertext text = 3; // The text(s) to decrypt.
}

message CompensatedDecryptionResponse {
  string error = 1; // non empty on error
  repeated CompensatedDecryptionResult results = 2;;
}

message CompensatedDecryptionResult {
  ElementModP decryption = 1;
  GenericChaumPedersenProof proof = 2;
  ElementModP recoveryPublicKey = 3;
}



